
#Basic Kubernetes Cluster Creation

# Note - Need to enable GKE and Cloud Registry APIs before running this. Access via console starts this...

gcloud beta container clusters create "my-cluster" \
--zone "us-central1-a" \
--no-enable-basic-auth \
--machine-type "n1-standard-1" \
--image-type "COS" \
--disk-type "pd-standard" \
--disk-size "100" \
--num-nodes "3" \
--enable-stackdriver-kubernetes \
--enable-ip-alias \
--network "projects/${GOOGLE_CLOUD_PROJECT}/global/networks/my-vpc-1" \
--subnetwork "projects/${GOOGLE_CLOUD_PROJECT}/regions/us-central1/subnetworks/subnet-a" \
--default-max-pods-per-node "110" \
--addons HorizontalPodAutoscaling,HttpLoadBalancing \
--enable-autoupgrade \
--enable-autorepair

Allow Authentication (may not be needed if command line build)
gcloud container clusters get-credentials my-cluster \
--zone=us-central1-a


Check
$ kubectl get nodes
NAME                                        STATUS   ROLES    AGE   VERSION
gke-my-cluster-default-pool-a7aaa5b4-3gxs   Ready    <none>   76m   v1.13.11-gke.14
gke-my-cluster-default-pool-a7aaa5b4-nqrw   Ready    <none>   76m   v1.13.11-gke.14
gke-my-cluster-default-pool-a7aaa5b4-qz3w   Ready    <none>   76m   v1.13.11-gke.14

Kubernetes Test
1.	Build a simple cluster
2.	Pull a simple Go application & Docker files from GIT (like the samples)
3.	Create the image
4.	Push into Registry
5.	Deploy to cluster
6.	Add service with load balancer
7.	Setup autoscale
8.	Run with Apache load testing
â€ƒ

app.py
# The Docker image contains the following code
from flask import Flask
import os
import socket

app = Flask(__name__)

@app.route("/")
def sayHello():
    html = "<div style='text-align:center;margin:20px;'><h1>Greetings from Richy</h1>This is a simple test page</div>"
    return html

if __name__ == "__main__":
  app.run(host='0.0.0.0', port=80)

dockerfile
# The Dockerfile defines the image's environment
# Import Python runtime and set up working directory
FROM python:3.7-slim
WORKDIR /app
ADD . /app

# Install any necessary dependencies
RUN pip install -r requirements.txt

# Open port 80 for serving the webpage
EXPOSE 80

# Run app.py when the container launches
CMD ["python", "app.py"]

requirements.txt
# This file defines the image's dependencies
flask>=0.12.3

$ docker build -t gcr.io/${GOOGLE_CLOUD_PROJECT}/hello-richy:v1 .

$ docker images
REPOSITORY                                  TAG                 IMAGE ID            CREATED             SIZE
gcr.io/playground-s-11-1f519b/hello-richy   v1                  b7810c153dfd        22 seconds ago      188MB
python                                      3.7-slim            5b03cb8574a0        2 weeks ago         179MB

$ gcloud auth configure-docker
$ docker push gcr.io/${GOOGLE_CLOUD_PROJECT}/hello-richy:v1

[old - $ kubectl run hello-richy --image=gcr.io/${GOOGLE_CLOUD_PROJECT}/hello-richy:v1 --port 80]

# Use a deployment file as its easier (and the next bit doesn't work with the above)
$ kubectl apply -f hello-richy-deploy.yaml

$ kubectl get pods
NAME                           READY   STATUS    RESTARTS   AGE
hello-richy-69f4498fb6-5h978   1/1     Running   0          27s
hello-richy-69f4498fb6-htph5   1/1     Running   0          27s

$ kubectl expose deployment hello-richy --type LoadBalancer --port 80 --target-port 80

$ kubectl get services
NAME          TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)        AGE
hello-richy   LoadBalancer   10.230.3.84   34.67.237.66   80:30851/TCP   68s
kubernetes    ClusterIP      10.230.0.1    <none>         443/TCP        102m

$ kubectl scale deployment hello-richy --replicas=3

$ kubectl get pods
NAME                           READY   STATUS    RESTARTS   AGE
hello-richy-69f4498fb6-5h978   1/1     Running   0          10m
hello-richy-69f4498fb6-htph5   1/1     Running   0          10m
hello-richy-69f4498fb6-p7bvb   1/1     Running   0          36s

$ kubectl autoscale deployment hello-richy --max 6 --min 4 --cpu-percent 50

$ kubectl get pods
NAME                           READY   STATUS    RESTARTS   AGE
hello-richy-85bb8d67c4-656cm   1/1     Running   0          105s
hello-richy-85bb8d67c4-7l7zj   1/1     Running   0          6m4s
hello-richy-85bb8d67c4-tsm5f   1/1     Running   0          2s
hello-richy-85bb8d67c4-vgfwn   1/1     Running   0          105s

$ gcloud container clusters resize my-cluster --num-nodes 4 --zone us-central1-a

$ kubectl get nodes
NAME                                        STATUS   ROLES    AGE    VERSION
gke-my-cluster-default-pool-a7aaa5b4-3gxs   Ready    <none>   108m   v1.13.11-gke.14
gke-my-cluster-default-pool-a7aaa5b4-nqrw   Ready    <none>   108m   v1.13.11-gke.14
gke-my-cluster-default-pool-a7aaa5b4-qz3w   Ready    <none>   108m   v1.13.11-gke.14
gke-my-cluster-default-pool-a7aaa5b4-wh6z   Ready    <none>   70s    v1.13.11-gke.14

$ gcloud container clusters update my-cluster \
--enable-autoscaling --min-nodes=2 --max-nodes=8 --zone=us-central1-a

*** Modify File ***
$ docker build -t gcr.io/my-project/hello-richy:v2 .

$ docker push gcr.io/my-project/hello-richy:v2

$ kubectl set image deployment/hello-richy hello-richy=gcr.io/${GOOGLE_CLOUD_PROJECT}/hello-richy:v2

$ kubectl get deployments -o wide
NAME          READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS    IMAGES                                         SELECTOR
hello-richy   4/4     4            4           22m   hello-richy   gcr.io/my-project/hello-richy:v2   run=hello-richy


